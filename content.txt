1. 데이터 바인딩
   for - html 하드코딩 -> 변경 어렵
   for  - 실시간 렌더링 이용
   {{내용}} //< :속성 ="">
   <  style = "스타일"> 로 css 스타일도 변수 가능

2. export default 변수
   import 새로운 변수명 from 파일경로
   / export {변수,변수}
   import {변수명}

3. Component  : 공통요소 공유
    Components 내에 파일 생성
    import
    component 등록
    사용

    -Component Data 바인딩하는 경우 [props]문법
        :부모 자식 요소간 데이터 전송 ㅣ props 문법
        data 전송 <Component사용태그 내 :props이름 ="변수"/>
        data등록  /*props 이름 : 데이터 형식*/
        data 쓰기 ;>ReadOnly임. Component 내에서 수정 불가.

4. 부모 자식 요소 간 변수 값 전달
    1) 부모 요소 내 component에서 제어
    2) $emit('플래그명')으로 제어
        -> 부모요소에서 @플래그명="동작"
    3) $emit('플래그명',전달 값(event))으로 제어
        -> 부모요소에서 @플래그명="동작;변경할변수명=event" 로 제어//

5. input 데이터 할당 방식
    1) event 사용
        <input @input="(변수명)=$event.target.value"/>
    2) v-model 사용
        <input v-model="(변수명)"/>

    #input 종류
        - input
            type지정 가능
        - textarea
        - select / option
6. watcher
    : 데이터 변경 감지
    1. <script>에 watch :{} 추가
    2. 변수명(){ 데이터 제어 }로 사용.

    #변수명(변경 후 값, 변경 전 값)
    #유용한 라이브러리 :vue 전용 form validation 있음.

7. css 애니메이션
    1) class 2개 사용: <div :class="start end">
    2) transition 태그 및 클래스명 지정
        1. transition으로 부분 감싸기
        2. 클래스명-enter/leave-from
           클래스명-enter/leave-active : transition:all 1s;
           클래스명-enter/leave-to
        작성

8. 정렬
  var array = [3,4,5];
  array.sort : 문자 정렬
  숫자 정렬 :
  array.sort(function(a,b){
    return a-b;
  });
 sort : a,b 는 배열 내 원소들  - 일경우 오른쪽, +일 경우 왼쪽으로 정렬하는 알고리즘.

9.[...변수명]
 : 변수 공유하고 싶지 않을 때 사용.
 SPA 에서는 데이터를 A=B 로 선언할 경우, 공유됨.
 A에서 SORT 하면 B도 SORT가 됨.
 -> 원본 데이터를 보존하지 못한다.
 => 원본 데이터 보존을 위해
    A= [1,2,3,4]
    B= [...A] 를 사용하여

10. 라이프사이클
 create-> mount(html->웹구성)-> 컴포넌트 생성 -[index.html]-> update(data 변경할 경우 컴포넌트가 재렌더링됨)
 -> unmount (컴포넌트 삭제)
    => lifecycle hook 사용
    setInterval/setTimeout